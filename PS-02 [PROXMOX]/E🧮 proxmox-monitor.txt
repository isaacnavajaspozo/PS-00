===========================================================================================================
=============[ K  U  M  A ]================================================================================

# update software repositories
sudo apt update

# install available software updates
sudo apt upgrade -y

# install prerequisites
sudo apt install git curl -y

# add nodejs software repository
curl -sL https://deb.nodesource.com/setup_current.x | sudo bash -

# install nodejs
sudo apt install nodejs -y

# clone from git
git clone https://github.com/louislam/uptime-kuma.git ./uptime-kuma

# change directory to ./uptime-kuma
cd uptime-kuma

# run setup
npm run setup

# run uptime kuma
node server/server.js

# pruebo que puedo entrar en la web
http://<IP-SERVER>:3001

# create nodejs user
sudo useradd nodejs

# change directory out of uptime-kuma
cd ..

# move uptime kuma to /opt
sudo mv ./uptime-kuma /opt

# create service bash file
sudo nano /opt/uptime-kuma/uptime-kuma.sh
---------------------------------------------------------------------
#!/usr/bin/bash
/usr/bin/node /opt/uptime-kuma/server/server.js
---------------------------------------------------------------------

# make uptime-kuma.sh executable
sudo chmod +x /opt/uptime-kuma/uptime-kuma.sh

# create uptime-kuma service file
sudo nano /etc/systemd/system/uptime-kuma.service
---------------------------------------------------------------------
[Unit]
Description=uptime-kuma

[Service]
ExecStart=/opt/uptime-kuma/uptime-kuma.sh
Restart=always
User=nodejs
Group=nodejs
WorkingDirectory=/opt/uptime-kuma

[Install]
WantedBy=multi-user.target
---------------------------------------------------------------------

# set owner of /opt/uptime-kuma
sudo chown nodejs:nodejs /opt/uptime-kuma -R

# reload systemd services
sudo systemctl daemon-reload

# start uptime-kuma service on boot and now
sudo systemctl enable uptime-kuma --now

# ⚠️ la primera vez que entro en la web tengo que crear la cuenta si no lo recuerdo puedo lanzar el siguiente comando
# cd /opt/uptime-kuma
# node server/server.js reset-password

# Configuración en el entorno web
Ajustes > Notificaciones > Configuración notificación
---------------------------------------------------------------------
Tipo de notificación: Email (SMTP)
Nombre sencillo: Gmail Alert
Nombre del host: smtp.gmail.com
Puerto: 465
Seguridad: TLS (465)
Usuario: <correo-gmail>
Contraseña: <contraseña-de-aplicacion-de-gmail>
Asunto Personalizado: 🔔📜 Alerta de monitor | PROXMOX  · root箱[MyKuma] 
[x] Habilitado por defecto
[x] Aplicar en todos los monitores existentes
---------------------------------------------------------------------

# creo un nuevo panel
Añadir nuevo panel
---------------------------------------------------------------------
Tipo de monitor: Ping
Nombre sencillo: <nombre>
Nombre del host: <ip-del-servidor-a-monitorizar>
---------------------------------------------------------------------

# Finalmente en GMAIL creo una etiqueta con el nombre "🔔📜 PROXMOX" y una regla que todos que tengan el asunto "🔔📜 Alerta de monitor", para que los envie a la etiqueta para poder borrarlos de forma masiva
 

=========================================================================================================
# 🧮 aviso del servidor por CPU [monitorización - sobrecalentamiento mini-pc-servidor]:

# instalando paquetes
sudo apt update
sudo apt install postfix sensors -y

# compruebo estado
systemctl status postfix

# copio la version antigua del archivo
cp /etc/postfix/main.cf /etc/postfix/main.cf.old
vim /etc/postfix/main.cf
---------------------------------------------------------------------
relayhost = [smtp.gmail.com]:587
smtp_use_tls = yes
smtp_sasl_auth_enable = yes
smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd
smtp_sasl_security_options = noanonymous
smtp_tls_CAfile = /etc/ssl/certs/ca-certificates.crt
smtp_address_preference = ipv4
---------------------------------------------------------------------

# agrego credenciales
vim /etc/postfix/sasl_passwd
---------------------------------------------------------------------
[smtp.gmail.com]:587 correo@gmail.com:tu_contraseña_o_clave_de_aplicación
---------------------------------------------------------------------

# doy permisos 
chmod 600 /etc/postfix/sasl_passwd

# compatibilidad de postfix por una versión reciente y estable
postconf compatibility_level=3.6

# recargo servicio
sudo postfix reload

# enviar correo
echo "Correo de prueba enviado desde Postfix usando Gmail" | mail -s "Prueba Exitosa" destinatario@gmail.com

# comprobar que se a enviado
mailq                                 # Ver cola
tail -f /var/log/mail.log             # Ver envíos en tiempo real y comprobar fallos

# desarrollo el script para avisar si la CPU sobrepasa los 80º (con el comando sensors)
vim /usr/local/bin/check_temp_loop.sh
---------------------------------------------------------------------
#!/bin/bash
GMAIL_TO="correo@gmail.com"
TEMP_LIMIT=30.0                               # grados de referencia para notificaciones (ej: 80.0)
SLEEP_INTERVAL=60                             # espera 60 segundos (1 minuto) hasta volver a ejecutar el script
ALERT_INTERVAL=1200                           # espera 1200 segundos (20 minutos) hasta volver a enviar la siguiente alerta
TIMESTAMP_FILE="/tmp/cpu_alert_timestamp"

while true; do
    temp=$(sensors | awk '/Package id 0/ {gsub(/\+|°C/, "", $4); print $4; exit}')
    [[ -z "$temp" ]] && temp=$(sensors | awk '/Core 0/ {gsub(/\+|°C/, "", $3); print $3; exit}')

    if [[ -z "$temp" ]]; then
        echo "[$(date)] No se pudo leer la temperatura." >> /var/log/check_temp_loop.log
    elif (( $(echo "$temp > $TEMP_LIMIT" | bc -l) )); then
        now=$(date +%s)
        last_alert=0
        [[ -f "$TIMESTAMP_FILE" ]] && last_alert=$(cat "$TIMESTAMP_FILE")

        if (( now - last_alert > ALERT_INTERVAL )); then
            echo "[$(date)] Temperatura alta: $temp°C." >> /var/log/check_temp_loop.log
            echo -e "⚠️ ALERTA:\n\nLa CPU de $(hostname) ha alcanzado los $temp°C.\n\nÚltimas 20 líneas del log:\n$(tail -n 20 /var/log/check_temp_loop.log)\n\nEl siguiente mensaje no se volverá a mandar hasta los 20 minutos después (aunque aumente la temperatura)." | mail -s "🔔⚠️ Alerta de monitor.proxmox - [CPU: $temp°C]" "$GMAIL_TO"

            echo "$now" > "$TIMESTAMP_FILE"
        fi
    else
        [[ -f "$TIMESTAMP_FILE" ]] && rm "$TIMESTAMP_FILE"
    fi

    sleep "$SLEEP_INTERVAL"
done
---------------------------------------------------------------------





## segunda opcion
¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿

#probar este otro script para ver si consume menos CPU
------------------------------------------------------------------------------------------------------
#!/bin/bash
GMAIL_TO="correo@gmail.com"
TEMP_LIMIT=80.0                             # temperatura límite realista
LOG_FILE="/var/log/check_temp.log"

# Leer temperatura
temp=$(sensors | awk '/Package id 0/ {gsub(/\+|°C/, "", $4); print $4; exit}')
[[ -z "$temp" ]] && temp=$(sensors | awk '/Core 0/ {gsub(/\+|°C/, "", $3); print $3; exit}')

if [[ -z "$temp" ]]; then
    echo "[$(date)] No se pudo leer la temperatura." >> "$LOG_FILE"
    exit 1
fi

if (( $(echo "$temp > $TEMP_LIMIT" | bc -l) )); then
    echo "[$(date)] Temperatura alta: $temp°C." >> "$LOG_FILE"
    echo -e "⚠️ ALERTA:\n\nLa CPU de $(hostname) ha alcanzado los $temp°C.\n\nÚltimas 20 líneas del log:\n$(tail -n 20 "$LOG_FILE")" | mail -s "🔔⚠️ Alerta CPU - $temp°C" "$GMAIL_TO"
fi
--------------------------------------------------------------------------------------------------------

# con cron en vez como servicio constante con systemctl
*/20 * * * * /usr/local/bin/check_temp_once.sh












# doy permisos 
chmod +x /usr/local/bin/check_temp_loop.sh

# creo un systemd para lectura continua del servicio
vim /etc/systemd/system/check_temp.service
---------------------------------------------------------------------
[Unit]
Description=monitor-cpu
After=network.target

[Service]
ExecStart=/usr/local/bin/check_temp_loop.sh
Restart=always
RestartSec=5
User=root

[Install]
WantedBy=multi-user.target
---------------------------------------------------------------------

# Recargar systemd
systemctl daemon-reexec
systemctl daemon-reload

# Habilitar e iniciar
systemctl enable --now check_temp.service

# Ver estado
systemctl status check_temp.service
systemctl status check_temp



=========================================================================================================
# 🧮 proyecto con esp [monitorización - antirobos]:
# una de estas dos esp (porque son mis favoritas y baratas), y el sensor de movimientos soldado 
- esp8266 LOLIN(WEMOS) D1 R2 & mini
- esp8266 D1 mini
  + sensor PIR HC-SR501  # sensor movimiento
  + DHT22 / AM2302       # sensor temperatura

+------------+---------------------+-------------------------------+
| HC-SR501   | ESP8266 D1 mini     | Descripción                   |
+------------+---------------------+-------------------------------+
| VCC        | Vin (5V)            | Alimentación                  |
| GND        | GND                 | Tierra                       |
| OUT        | D5 (GPIO14)         | Señal digital del sensor      |
+------------+---------------------+-------------------------------+

# esta sin terminar porque quiero hacer también un servidor web que registre temperatura
# Código Arduino IDE para ESP8266 D1 mini + HC-SR501 + envío Gmail SMTP
# arduino IDE - descargar librería : ESP_Mail_Client
---------------------------------------------------------------------
#include <ESP8266WiFi.h>
#include <ESP_Mail_Client.h>

// --- Config WiFi ---
const char* ssid = "TU_SSID";
const char* password = "TU_PASSWORD";

// --- Config SMTP ---
#define SMTP_HOST "smtp.gmail.com"
#define SMTP_PORT 587
#define AUTHOR_EMAIL "tucorreo@gmail.com"
#define AUTHOR_PASSWORD "tu_app_password"

// Destinatario
#define RECIPIENT_EMAIL "destino@gmail.com"

// Pin sensor PIR
#define PIR_PIN D5

// Variables
bool lastState = false;

// SMTP Session
SMTPSession smtp;

void smtpCallback(SMTP_Status status) {
  Serial.println(status.info());
}

void setup() {
  Serial.begin(115200);
  pinMode(PIR_PIN, INPUT);

  WiFi.begin(ssid, password);
  Serial.print("Conectando a WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("Conectado!");

  // Configurar sesión SMTP
  smtp.debug(1);
  ESP_Mail_Session session;
  session.server.host_name = SMTP_HOST;
  session.server.port = SMTP_PORT;
  session.login.email = AUTHOR_EMAIL;
  session.login.password = AUTHOR_PASSWORD;
  session.login.user_domain = "";

  smtp.callback(smtpCallback);
  smtp.session.setSession(session);
}

void loop() {
  bool motionDetected = digitalRead(PIR_PIN) == HIGH;

  if (motionDetected && !lastState) {
    Serial.println("Movimiento detectado, enviando email...");
    sendEmail();
    lastState = true;
  } else if (!motionDetected && lastState) {
    Serial.println("Sin movimiento");
    lastState = false;
  }

  delay(500); // Anti-rebote simple
}

void sendEmail() {
  SMTP_Message message;

  message.sender.name = "ESP8266 PIR Sensor";
  message.sender.email = AUTHOR_EMAIL;
  message.subject = "Alerta: Movimiento Detectado!";
  message.addRecipient("Destinatario", RECIPIENT_EMAIL);

  message.text.content = "Se ha detectado movimiento en el sensor PIR HC-SR501 conectado al ESP8266.";

  if (!smtp.connect()) {
    Serial.println("Error conectando al servidor SMTP");
    return;
  }

  if (!MailClient.sendMail(&smtp, &message)) {
    Serial.println("Error enviando email, " + smtp.errorReason());
  } else {
    Serial.println("Email enviado!");
  }
}
---------------------------------------------------------------------

# Crear nuevo monitor :: configurar un ping a la esp para saber si esta apagada o encendida
- de la misma manera que en la parte de arriba con PING

# Crear nuevo monitor :: configurar si la respuesta HTTP contiene un texto específico para comprobar movimiento a nivel de Kuma
---------------------------------------------------------------------
Tipo: HTTP(s)
Método: GET
URL: http://tu_ip_esp:puerto/estado
(ej: http://192.168.1.100:8080/estado)
Configura opciones básicas:
Nombre: Sensor Movimiento
Intervalo: lo que quieras (ej: 60s)
Activar la opción de palabra clave (Keyword):
Marca la opción "Enable keyword check"
En el campo Keyword, escribe:
on
(o lo que deba contener la respuesta)
# si no devuelve la web la palabra on se caera la monitorización
---------------------------------------------------------------------

#    HTTP 200 OK con body: "on"	 ✅ UP
#    HTTP 200 OK con body: "off" ❌ DOWN

