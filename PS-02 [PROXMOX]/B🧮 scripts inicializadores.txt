============[Reducci칩n consumo Prxmox]=================================================================================
## [opcional] - desactivar todas las partes de la bios que no vayamos a necesitar
# lo primero es actualizar la bios para tener m치s opciones de configuraci칩n

# est치ndar que permite al sistema operativo gestionar la energ칤a de los dispositivos de hardware y controlar funciones como la suspensi칩n, el apagado y la administraci칩n de energ칤a de los componentes del sistema.
# BIOS > ACPI Settings > Enable ACPI Auto Configuration : Enabled

# desactivar sata (en el caso de que no vaya a utilizarlos)
# SATA Configuration > SATA Controller > Disabled

## Proxmox
# Scaling governors (lo hago m치s adelante)

# script para activar el auto ASPM (cuidado porque las tarjetas de red podri치n no funcionar bien...)
# https://github.com/notthebee/AutoASPM
# https://raw.githubusercontent.com/notthebee/AutoASPM/refs/heads/main/autoaspm.py
# wget https://raw.githubusercontent.com/notthebee/AutoASPM/refs/heads/main/autoaspm.py
# phyton3 autospm.py

## otra configuraci칩n: activaci칩n y desactivaci칩n autom치tica
# Configurar el RTC en la BIOS para encender el propio pc, programandolo para encenderlo y apagarlo autom치ticamente


============[instalaci칩n scripts]=====================================================================================
# cambio el tema
usuario (arriba a la derecha) > Color Theme > Proxmox Dark

# instalamos el script inicializador
https://community-scripts.github.io/ProxmoxVE/scripts?id=post-pve-install
(proxmox:selecciono el nodo) > Shell > (copio y pego el script)
- y /all

# instalo script para cambiar a powersave (elige como el CPU escala su frecuencia y consumo de los watts)
https://community-scripts.github.io/ProxmoxVE/scripts?id=scaling-governor
[*] powersave
- y

# (si funciona bien no lo toques 游땍)
# instalo script para ver si el procesador tiene alguna actualizaci칩n
# https://community-scripts.github.io/ProxmoxVE/scripts?id=microcode
# [*] intel-microcode_3.20240514.1_amd64.deb
# - y

# 丘멆잺 de este 칰ltimo script no se si fiarme ya que es de alguien independiente y no oficial de proxmox, lo quiero dejar documentado por si ag칰n d칤a es 칰til para m칤
# instalo script proxmenux para tareas de administrador de servidor (drivers, m치quinas virtuales...)
# https://github.com/MacRimi/ProxMenux
# en la pagina princial, donde muestra el readme solo tengo que copiar y pegar el instalador : bash -c "$(wget -qLO - https://raw.githubusercontent.com/MacRimi/ProxMenux/main/install_proxmenux.sh)"
# - normal
# - y
#
# para abrirlo "menu"
# ahora desde proxmox puedo isntalar paquetes de proxmox sin tener que salir de proxmox, ahora en este ejemplo voy a instalar adguards sin salir de proxmox
# > menu
#   > Proxmox Helpers Script
#   > search : adguards
#   > yes
#   > Desafult Settings

# reinicio el servidor proxmox
- reiniciar


# aproximaci칩n total de m치quinas seg칰n recursos

Sin overcommit (CPU estricta)
+------------+------------+-------------+--------------------------------+--------------------------------------+   +---------------------+
| Tipo VM    | RAM por VM | vCPU por VM | M치x. vCPUs (cores f칤sicos)     | M치x. VMs por RAM (16 GB - 2 GB host) |   | M치x. n칰mero de VMs  |
+------------+------------+-------------+--------------------------------+--------------------------------------+   +---------------------+
| VM ligera  | 512 MB     | 1           | 4                              | 28                                   |   | 4                   |
| VM est치ndar| 2 GB       | 1           | 4                              | 7                                    |   | 4                   |
| VM pesada  | 4 GB       | 2           | 2                              | 3                                    |   | 2                   |
+------------+------------+-------------+--------------------------------+--------------------------------------+   +---------------------+

Con overcommit moderado (x2 vCPUs)
+------------+------------+-------------+--------------------------------+--------------------------------------+   +---------------------+
| Tipo VM    | RAM por VM | vCPU por VM | M치x. vCPUs (cores f칤sicos 칑 2) | M치x. VMs por RAM (16 GB - 2 GB host) |   | M치x. n칰mero de VMs  |
+------------+------------+-------------+--------------------------------+--------------------------------------+   +---------------------+
| VM ligera  | 512 MB     | 1           | 8                              | 28                                   |   | 8                   |
| VM est치ndar| 1 GB       | 1           | 8                              | 14                                   |   | 8                   |
| VM est치ndar| 2 GB       | 1           | 8                              | 7                                    |   | 7                   |
| VM pesada  | 4 GB       | 2           | 4                              | 3                                    |   | 3                   |
+------------+------------+-------------+--------------------------------+--------------------------------------+   +---------------------+




========================================================================================================
[游늳 EJECUTO SCRIPT]::
# este script evalua la vida del servidor ya sea SMART RAM CPU almacenamiento para adelantarme a la vida ut칤l del hardware
vim /usr/bin/check_health.sh
----------------------------------------------------------------------------
#!/bin/bash
EMAIL="mi@correo.com"
HOSTNAME=$(hostname)
DATE=$(date '+%Y-%m-%d %H:%M:%S')

# Funci칩n para instalar paquetes si no existen
install_if_missing() {
  command -v "$1" >/dev/null 2>&1 || {
    echo "Instalando $1..."
    sudo apt-get update && sudo apt-get install -y "$1"
  }
}

# Comprobar e instalar dependencias
install_if_missing smartctl
install_if_missing mail

# 1. Estado SMART discos
DISKS=$(lsblk -dn -o NAME)
SMART_REPORT=""
for disk in $DISKS; do
  SMART=$(sudo smartctl -H /dev/$disk 2>/dev/null | grep 'SMART overall-health self-assessment test result' || echo "No SMART")
  SMART_REPORT+="Disco /dev/$disk: $SMART\n"
done

# 2. Uso RAM
RAM_USED=$(free -h | awk '/^Mem:/ {print $3 " used / " $2 " total"}')

# 3. Uso almacenamiento
DISK_USAGE=$(df -h --total | awk '/total/ {print $3 " used / " $2 " total (" $5 " used)"}')

# 4. Carga CPU (칰ltimos 1 min)
LOAD=$(uptime | awk -F'load average:' '{print $2}' | cut -d',' -f1 | xargs)

# 5. Armar mensaje
MSG="Informe de salud del servidor $HOSTNAME - $DATE

Estado SMART discos:
$SMART_REPORT

Uso RAM: $RAM_USED
Uso almacenamiento: $DISK_USAGE
Carga CPU (1min): $LOAD
"

# 6. Enviar correo
echo -e "$MSG" | mail -s "Informe salud servidor $HOSTNAME" $EMAIL
----------------------------------------------------------------------------

## configuro un cron todos los viernes, sabados y domingos a las 9:30
crontab -e
----------------------------------------------------------------------------
30 21 * * 5,6,0 /usr/bin/check_health.sh
----------------------------------------------------------------------------
